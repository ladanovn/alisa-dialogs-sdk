import Commands from './commands';
import Scene from './scene';
import { IConfig, IAlice } from './types/alice';
import { ICommand } from './types/command';
import { IContext } from './types/context';
import { WebhookResponse, WebhookRequest } from './types/webhook';
import { EventInterface } from './types/eventEmitter';
export default class Alice implements IAlice {
    scenes: Scene[];
    protected anyCallback: (ctx: IContext) => void;
    protected config: IConfig;
    protected commands: Commands;
    private welcomeCallback;
    private timeoutCallback;
    private middlewares;
    private currentScene;
    private sessions;
    private imagesApi;
    private server;
    private eventEmitter;
    constructor(config?: IConfig);
    on(event: EventInterface['type'], callback: EventInterface['callback']): void;
    /**
     * Attach alice middleware to the application
     * @param {Function} middleware - function, that receives {context}
     * and makes some modifications with it.
     */
    use(middleware: (IContext: IContext) => IContext): void;
    welcome(callback: (IContext: any) => void): void;
    command(name: ICommand, callback: (IContext: any) => void): void;
    any(callback: (IContext: any) => void): void;
    /**
     * Match the request with action handler,
     * compose and return a reply.
     * @param {Object} req — JSON request from the client
     * @param {Function} sendResponse — Express res function while listening on port.
     */
    handleRequestBody(req: any, sendResponse: any): Promise<any>;
    handleRequest(req: WebhookRequest, sendResponse?: (res: WebhookResponse) => void): Promise<any>;
    listen(webhookPath?: string, port?: number, callback?: () => void): Promise<{}>;
    registerScene(scene: any): void;
    uploadImage(imageUrl: string): Promise<any>;
    getImages(): Promise<any>;
    stopListening(): void;
    private handleProxyRequest;
}
