import Session from './session';
import Scene from './scene';
import ReplyBuilder, { IReply } from './replyBuilder';
import ButtonBuilder from './buttonBuilder';
import { WebhookResponse, WebhookRequest } from './types/webhook';
import { EventEmitterInterface } from './types/eventEmitter';
import { IContext } from './types/context';
import { ICommand } from './types/command';
import { BigImageCard, ItemsListCard } from './types/card';
export default class Context implements IContext {
    req: WebhookRequest;
    sessionId: string;
    messageId: string;
    userId: string;
    payload: {};
    message: string;
    session: Session;
    originalUtterance: string;
    eventEmitter: EventEmitterInterface;
    command?: ICommand;
    replyBuilder: ReplyBuilder;
    buttonBuilder: ButtonBuilder;
    sendResponse: (response: WebhookResponse) => void;
    private _isReplied;
    private scenes;
    constructor(params: any);
    readonly body: {};
    reply(replyMessage: string | IReply): WebhookResponse;
    enterScene(scene: Scene): void;
    replyWithImage(params: string | BigImageCard): any;
    replyWithItemsList(params: ItemsListCard): any;
    leaveScene(): void;
    goodbye(replyMessage: string | IReply): void;
    private _createReply;
    private _sendReply;
}
