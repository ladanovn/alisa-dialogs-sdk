"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const chalk_1 = __importDefault(require("chalk"));
const loglevel_1 = __importDefault(require("loglevel"));
const loglevel_plugin_prefix_1 = __importDefault(require("loglevel-plugin-prefix"));
const colors = {
    TRACE: chalk_1.default.magenta,
    DEBUG: chalk_1.default.cyan,
    INFO: chalk_1.default.blue,
    WARN: chalk_1.default.yellow,
    ERROR: chalk_1.default.red,
};
loglevel_plugin_prefix_1.default.reg(loglevel_1.default);
loglevel_plugin_prefix_1.default.apply(loglevel_1.default, {
    format(level, name, timestamp) {
        return `${chalk_1.default.gray(`[${timestamp}]`)} ${colors[level.toUpperCase()](level)} ${chalk_1.default.green(`${name}:`)}`;
    },
});
loglevel_plugin_prefix_1.default.apply(loglevel_1.default.getLogger('critical'), {
    format(level, name, timestamp) {
        return chalk_1.default.red.bold(`[${timestamp}] ${level} ${name}:`);
    },
});
function createLoggerMiddleware(opts = {}) {
    const eventTypes = {
        [constants_1.EVENT_MESSAGE_RECIEVED]: 'info',
        [constants_1.EVENT_MESSAGE_SENT]: 'info',
        [constants_1.EVENT_MESSAGE_NOT_SENT]: 'warn',
        [constants_1.EVENT_MESSAGE_PROXIED]: 'info',
        [constants_1.EVENT_MESSAGE_PROXY_ERROR]: 'error',
        [constants_1.EVENT_SERVER_STARTED]: 'info',
        [constants_1.EVENT_SERVER_STOPPED]: 'info',
    };
    let isInitialized = false;
    return ctx => {
        if (isInitialized) {
            return ctx;
        }
        loglevel_1.default.setLevel(opts.level || 0);
        ctx.eventEmitter.subscribe(constants_1.EVENT_MESSAGE_RECIEVED, logEvent);
        ctx.eventEmitter.subscribe(constants_1.EVENT_MESSAGE_SENT, logEvent);
        ctx.eventEmitter.subscribe(constants_1.EVENT_MESSAGE_NOT_SENT, logEvent);
        ctx.eventEmitter.subscribe(constants_1.EVENT_MESSAGE_PROXIED, logEvent);
        ctx.eventEmitter.subscribe(constants_1.EVENT_MESSAGE_PROXY_ERROR, logEvent);
        ctx.eventEmitter.subscribe(constants_1.EVENT_SERVER_STARTED, logEvent);
        ctx.eventEmitter.subscribe(constants_1.EVENT_SERVER_STOPPED, logEvent);
        function logEvent(event) {
            try {
                loglevel_1.default[eventTypes[event.type]]([`{${chalk_1.default.cyan(event.type)}}`, event.data].filter(Boolean).join(' '));
            }
            catch (error) {
                loglevel_1.default.error(`Cant log "${event.type}"`);
            }
        }
        isInitialized = true;
        return ctx;
    };
}
exports.default = createLoggerMiddleware;
